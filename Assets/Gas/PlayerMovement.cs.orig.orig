using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerMovement : MonoBehaviour
{
    enum State
    {
        Idle,
        Walking,
        Running,
        Crouching,
        Grabbed
    }

    State state;

    public Transform orientation;

    public float runSpeed;
    public float walkSpeed;
    public float crouchSpeed;

    public float crouchYScale;
    public float startYScale;

    float horizontalInput;
    float verticalInput;

    Vector3 moveDirection;

    Rigidbody rb;

    // Start is called before the first frame update
    private void Start()
    {
        state = State.Idle;

        rb = GetComponent<Rigidbody>();
        rb.freezeRotation = true;

        startYScale = transform.localScale.y;

    }

    // Update is called once per frame
    private void Update()
    {
        // Get current axis locations
        getInput();
    }

    private void FixedUpdate()
    {
        // Generate move speed and direction
        moveDirection = orientation.right * horizontalInput + (orientation.forward * verticalInput);
        float speed = 0.0f;
        switch (state)
        {
            case State.Idle:
                break;
            case State.Grabbed:
                return;
            case State.Walking:
                speed = walkSpeed;
                break;
            case State.Running:
                speed = runSpeed;
                break;
            case State.Crouching:
                speed = crouchSpeed;
                break;
        }
        rb.position += moveDirection.normalized * speed * Time.deltaTime;
    }

    private void handleStateTransition(State old_state, State new_state)
    {
        if (new_state == State.Crouching)
        {
            transform.localScale = new Vector3(transform.localScale.x, crouchYScale, transform.localScale.z);
        }
        else if (old_state == State.Crouching)
        {
            transform.localScale = new Vector3(transform.localScale.x, startYScale, transform.localScale.z);
        }

        if (new_state == State.Running)
        {
            GetComponent<Animator>().SetBool("sprint", true);
        }
        else if (old_state == State.Running)
        {
            GetComponent<Animator>().SetBool("sprint", false);
        }
    }

    private void getInput()
    {
        horizontalInput = Input.GetAxisRaw("Horizontal");
        verticalInput = Input.GetAxisRaw("Vertical");

        bool hasMovement = horizontalInput != 0.0f || verticalInput != 0.0f;

        State oldState = state;
        if (hasMovement)
        {
<<<<<<< HEAD
            run = true;
            walk = false;
            crouch = false;
            GetComponent<Animator>().SetBool("sprint", true);
        }else if (Input.GetKey(KeyCode.LeftControl))
        {
            crouch = true;
            run = false;
            walk = false;
=======
            if (Input.GetKey(KeyCode.LeftShift))
            {
                state = State.Running;
            }
            else if (Input.GetKey(KeyCode.LeftControl))
            {
                state = State.Crouching;
            }
            else
            {
                state = State.Walking;
            }
>>>>>>> main
        }
        else if (state != State.Grabbed)
        {
<<<<<<< HEAD
            walk = true;
            crouch = false;
            run = false;
            GetComponent<Animator>().SetBool("sprint", false);
        }
    }

    private void movePlayer()
    {
        // Generate move speed and direction
        moveDirection = orientation.right * horizontalInput + (orientation.forward * verticalInput);

        // Check if player is shift walking
        if (walk)
        {
            rb.velocity = Vector3.ClampMagnitude(rb.velocity, maxWalk);
            rb.position += moveDirection * walkSpeed;
        }

        // Check if player is crouched
        if (crouch)
        {
            transform.localScale = new Vector3(transform.localScale.x, crouchYScale, transform.localScale.z);
            rb.AddForce(Vector3.down * 5f, ForceMode.Impulse);
            rb.velocity = Vector3.ClampMagnitude(rb.velocity, maxCrouch);
            rb.position += moveDirection * crouchSpeed;
        }
        else
        {
            transform.localScale = new Vector3(transform.localScale.x, startYScale, transform.localScale.z);
        }

        // Check if plater is running
        if(run)
        {
            rb.AddForce(moveDirection.normalized * runSpeed * 10f, ForceMode.Force);
            rb.velocity = Vector3.ClampMagnitude(rb.velocity, maxRun);
        }
       
    }
=======
            state = State.Idle;
        }

        if (oldState != state)
        {
            handleStateTransition(oldState, state);
        }
    }
>>>>>>> main
}
